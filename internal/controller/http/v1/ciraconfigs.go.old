package v1

import (
	"net/http"

	"github.com/gin-gonic/gin"

	"github.com/rsdmike/rps/internal/entity"
	"github.com/rsdmike/rps/internal/usecase"
	"github.com/rsdmike/rps/pkg/logger"
)

type ciraConfigRoutes struct {
	cira usecase.CIRAConfig
	l logger.Interface
}

func newCIRAConfigRoutes(handler *gin.RouterGroup, t usecase.CIRAConfig, l logger.Interface) {
	r := &ciraConfigRoutes{t, l}

	h := handler.Group("/ciraconfigs")
	{
		h.GET("/", r.get)
		h.GET("/:configName", r.getByName)
		h.POST("/", r.insert)
		h.PATCH("/", r.update)
		h.DELETE("/:configName", r.delete)
	}
}

func (r *ciraConfigRoutes) get(c *gin.Context) {
	// Implementation similar to get function in domainRoutes
}

func (r *ciraConfigRoutes) getByName(c *gin.Context) {
	var config entity.CIRAConfig
	if err := c.ShouldBindUri(&config); err != nil {
		errorResponse(c, http.StatusBadRequest, err.Error())

		return
	}

	configs, err := r.cira.GetByName(c.Request.Context(), config.ConfigName, "")
	if err != nil {
		r.l.Error(err, "http - v1 - getByName")
		errorResponse(c, http.StatusInternalServerError, "database problems")

		return
	}

	c.JSON(http.StatusOK, configs)
}

func (r *ciraConfigRoutes) insert(c *gin.Context) {
	var config entity.CIRAConfig
	if err := c.ShouldBindJSON(&config); err != nil {
		errorResponse(c, http.StatusBadRequest, err.Error())

		return
	}

	configs, err := r.cira.Insert(c.Request.Context(), &config)
	if err != nil {
		r.l.Error(err, "http - v1 - insert")
		errorResponse(c, http.StatusInternalServerError, "database problems")

		return
	}

	c.JSON(http.StatusOK, configs)
}

func (r *ciraConfigRoutes) update(c *gin.Context) {
	var config entity.CIRAConfig
	if err := c.ShouldBindJSON(&config); err != nil {
		errorResponse(c, http.StatusBadRequest, err.Error())

		return
	}

	configs, err := r.cira.Update(c.Request.Context(), &config)
	if err != nil {
		r.l.Error(err, "http - v1 - update")
		errorResponse(c, http.StatusInternalServerError, "database problems")

		return
	}

	c.JSON(http.StatusOK, configs)
}

func (r *ciraConfigRoutes) delete(c *gin.Context) {
	var config entity.CIRAConfig
	if err := c.ShouldBindUri(&config); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})

		return
	}

	configs, err := r.cira.Delete(c.Request.Context(), config.ConfigName, "")
	if err != nil {
		r.l.Error(err, "http - v1 - delete")
		errorResponse(c, http.StatusInternalServerError, "database problems")

		return
	}

	c.JSON(http.StatusOK, configs)
}
